occaFunction double rn(unsigned long int * seed)
{
  double ret;
  unsigned long int n1;
  unsigned long int a = 16807;
  unsigned long int m = 2147483647;
  n1 = ( a * (*seed) ) % m;
  *seed = n1;
  ret = (double) n1 / m;
  return ret;
}


/* occaKernel void lookup(occaKernelInfoArg, occaPointer double *F_vals, */ 
/*     occaConst long int occaVariable F_len, occaConst double occaVariable interval, */ 
/*     occaConst long int occaVariable total_lookups, occaPointer double *sums) { */

occaKernel void lookup(double *F_vals, const double interval, 
    const long int total_lookups, double *F_sums, unsigned long int *L_sums) {

  for(int outer_id=0; outer_id<outer_dim; ++outer_id; outer0) {

    // A cache per outer unit.  Each inner unit i writes to F_sums_cache[i]
    shared double            F_sums_cache[inner_dim];
    shared unsigned long int L_sums_cache[inner_dim];

    for (int inner_id=0; inner_id<inner_dim; ++inner_id; inner0) {

      // Variables declared in the scope of an InnerFor loop are register variables
      const int global_id = outer_id*inner_dim + inner_id;
      double            inner_F_sum = 0;
      unsigned long int inner_L_sum = 0;

      unsigned long int seed = 10000*occaInnerId0 + 10*occaOuterId0 + 1;

      for (long int i=global_id; i < total_lookups; i += occaGlobalDim0) {

        // Randomly sample a continous value for x
        const double x = (double) rn(&seed);

        // Find the indices that bound x on the grid
        const long int j = x / interval;
        const long int k = j+1;

        // Calculate interpolation factor
        const double f = (k*interval - x) / (k*interval - j*interval);

        // Interpolate and accumulate result
        inner_F_sum += F_vals[j+1] - f * (F_vals[j+1] - F_vals[j]);

        // Increment number of lookups
        ++inner_L_sum;

      } // lookup loop

      F_sums_cache[inner_id] = inner_F_sum;
      L_sums_cache[inner_id] = inner_L_sum;

    } //inner 0

    barrier(localMemFence);

    for (int i=inner_dim/2; i != 0; i /= 2) {
      for (int inner_id=0; inner_id<inner_dim; ++inner_id; inner0) {

        // Naive reduction
        if (inner_id < i && inner_id + i < inner_dim) {
          F_sums_cache[inner_id] += F_sums_cache[inner_id + i];
          L_sums_cache[inner_id] += L_sums_cache[inner_id + i];
        }
      }

      barrier(localMemFence);
    } //inner 0

    for (int inner_id=0; inner_id<inner_dim; ++inner_id; inner0) {
      if (inner_id == 0) {
        F_sums[outer_id] = F_sums_cache[0];
        L_sums[outer_id] = L_sums_cache[0];
      }
    } // inner 0

  } // outer0
}
